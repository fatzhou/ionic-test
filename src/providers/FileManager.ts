import { Injectable } from '@angular/core';import { GlobalService } from './GlobalService';import { Platform } from 'ionic-angular';import { PhotoLibrary, LibraryItem } from '@ionic-native/photo-library';import { File } from '@ionic-native/File';import { FileOpener } from '@ionic-native/file-opener';declare var cordova;declare var window;@Injectable()export class FileManager {	constructor(private global: GlobalService,				private platform: Platform,				private file: File,				private fileOpener: FileOpener,				private photoLibrary: PhotoLibrary) {	}	savebase64AsImageFile(folderPath, fileName, contentType, blob){            	console.log("Starting to write the file :" + fileName);      	window.resolveLocalFileSystemURL(folderPath, (dir) => {      		dir.getFile(fileName, {create: true}, (file) => {              	console.log("File created succesfully.");              	file.createWriter((fileWriter) => {                  	console.log("Writing content to file");                  	fileWriter.write(blob);                  	//测试代码：确认文件是否已经存在                  	// console.log(folderPath + fileName)                  	// this.file.checkFile(folderPath, fileName)                   	// .then(res => {                  	// 	console.log("文件查询结果:" + JSON.stringify(res));                  	// })                  	// .catch(e => {                  	// 	console.log("异常：" + JSON.stringify(e));                  	// 	console.log(e.stack)                  	// })              	}, () => {                  	console.log('Unable to save file in path '+ folderPath);              	});      		});      	});  	}		  browserLocal(file) {	      if(typeof file === 'string') {	          console.log("传入路径，直接浏览" + file);	          //字符串	          return this.file.listDir(file, '.')	          .then(entries => {	          	  return {	          	  	err_no: 0,	          	  	type: "listFolder",	          	  	data: entries	          	  }	          })	      } else {	          if(file.isFile) {	              console.log("直接打开文件即可");	              var mime = this.computeFileMimeType(file.name);				   if(mime) {			            return this.fileOpener.open(file.nativeURL, mime)			            .then(res => {			            	return {								type: "fileOpener",								err_no: 0,				            	data: res			            	}			            })			        } else {			        	console.log("无法打开文件");			        	return {							type: "fileOpener",								err_no: -1		        					        	}			        }	          } else if(file.isDirectory) {	              console.log("文件夹诶")	              return this.browserLocal(file.nativeURL);	          }	      }	  }    computeFileMimeType(name) {        let matches = name.match(/[^\.]+$/g);        let style = matches && matches[0] || '';        var suffix = style.toLowerCase();        if (/^(jpe?g|gif)$/.test(suffix)) {            return "image/jpeg";        }                if (/^png$/.test(suffix)) {            return "image/png";        }        if (/^(mp3|ogg|asf|wma|vqf|midi|module|ape|real|wav|flac|amr|m4a)$/.test(suffix)) {            return 'audio/mpeg';        }        if (/^(mp4|avi|rm|rmvb|mov|mp(e)g)$/.test(suffix)) {            return 'video/mpeg';        }        if (/^(doc|docx)$/.test(suffix)) {            return "application/msword";        }        if (/^txt|c|h|js|html|css$/.test(suffix)) {            return "text/plain";        }        if (/^ico$/.test(suffix)) {            return "image/x-icon";        }        if (/^(pdf)$/.test(suffix)) {            return "application/pdf";        }        if (/^(ppt|pptx)$/.test(suffix)) {            return "application/vnd.ms-powerpoint";        }        if (/^(xls|xlsx)$/.test(suffix)) {            return "application/vnd.ms-excel";        }        if (/^(zip)$/.test(suffix)) {            return "application/zip";        }        if (/^(tar)$/.test(suffix)) {            return "application/x-tar";        }        return "";    }	saveThumbnail(id, fileName) {		return new Promise((resolve, reject) => {	      	cordova.plugins.photoLibrary.getThumbnailBinary(	        	id, // or libraryItem.id		        (blob)=>{		        	console.log("请求缩略图成功");		          	this.savebase64AsImageFile(this.global.fileSavePath, fileName, "image/png", blob);		        },      		        (res)=>{		          console.log("获取缩略图失败" + JSON.stringify(res))		        },		        { // optional options		          	thumbnailWidth: GlobalService.THUMBNAIL_WIDTH,		          	thumbnailHeight: GlobalService.THUMBNAIL_HEIGHT,		          	quality: GlobalService.THNUBNAIL_QUALITY		        }		    ) 					})	}	fetchAlbums() {		console.log("开始获取相册...")		return this.photoLibrary.getAlbums()		.then(albums => {			console.log("相册获取完毕........." + JSON.stringify(albums));			this.global.localAlbums = albums;			albums.forEach(function(album:any) {				album.photos = album.photos || [];			});			console.log("开始获取图片数据...");			return this.fetchPhotos();        		})		.catch(e => {			console.log(e.stack);			return this.photoLibrary.requestAuthorization({read: true})			.then(() => {				return this.fetchAlbums();			})		})	}	//相册管理	fetchPhotos() {		let library = [];		return new Promise((resolve, reject) => {			this.photoLibrary.getLibrary({ 				thumbnailWidth: GlobalService.THUMBNAIL_WIDTH, 				thumbnailHeight: GlobalService.THUMBNAIL_HEIGHT, 				includeAlbumData: true				/*, chunkTimeSec: 0.3*/ 			}).subscribe({				next: (chunk) => {					console.log("收到chunk数据:" + chunk.length)					library = library.concat(chunk);				},				error: (err: string) => {					console.log('*************' + err)					if (err.startsWith('Permission')) {						this.photoLibrary.requestAuthorization({read: true})						.then(() => {							console.log("申请到权限了啊.......");							this.fetchPhotos()							.then((res:any) => {								console.log("获取数据成功饿了。.");								if(res.err_no === 0) {									resolve({										err_no: 0,										err_msg: "Ok"									})								} else {									resolve({										err_no: -2,										err_msg: "Authorization needed"									});								}							})						})					} else { // Real error						//用户拒绝授权						resolve({							err_no: -1,							err_msg: "Unknown error"						}) 					}				},				complete: () => {					console.log('completed.........')					this.global.localPictureLibrary = library;					// this.getURl(this.library[1].id);					this.global.localAlbums.forEach(item => {						item.photos = library.filter(x => {							return x.albumIds.indexOf(item.id) > -1;						});					})					this.global.localAlbums.forEach(item => {						console.log("相册" + item.title + "的相片张数是" + item.photos.length);					})					resolve({						err_no: 0,						err_msg: 'ok',					})				}			});					})	}	scanLocalFiles(root, depth, cb) {		let fileList = []; // 已搜索到的文件		let start = Date.now();		console.log("开始扫描文件");		this.breadthFirstSearch([root], fileList, depth, (data)=>{			console.log("总计耗时：" + (Date.now() - start));			//搜索完毕，对文件分类			cb && cb(data)		});	}	breadthFirstSearch(queue, fileList, depth, callback) {	    let musicSuffix = "mp3|ogg|asf|wma|vqf|midi|module|ape|real|wav|flac|amr|m4a",	        videoSuffix = "mp4|avi|rm|rmvb|mov|mp(e)g",	        docSuffix = "doc|docx|pdf",	        allFileSuffix = [musicSuffix, videoSuffix, docSuffix].join('|');	    let reg = new RegExp("\\.(" + allFileSuffix + ")$");	    let bfsQueue = [];	    let self = this	    let receive = 0;	    function levelFinishedCheck(len) {            receive++;            console.log("收到回包:" + receive + ", 总数: " + len);            if(receive === len) {                 if(depth > 0) {                     setTimeout(()=>{                     	 console.log("下一轮回调深度：" + (depth - 1) + ",当前数组元素数目:" + bfsQueue.length);                         self.breadthFirstSearch(bfsQueue, fileList, depth - 1, callback);                        }, 0)                 } else {                 	console.log("搜索完成：" + fileList.length);				    let musicReg = new RegExp("\\.(" + musicSuffix + ")$");				    let videoReg = new RegExp("\\.(" + videoSuffix + ")$");				    let docReg = new RegExp("\\.(" + docSuffix + ")$");				     let musicFiles = fileList.filter(item => {				     	return musicReg.test(item.name) === true;				     });					     				     let videoFiles = fileList.filter(item => {				     	return videoReg.test(item.name) === true;				     });					     				     let docFiles = fileList.filter(item => {				     	return docReg.test(item.name) === true;				     });                     callback && callback({                     	musicFiles: musicFiles,                     	videoFiles: videoFiles,                     	docFiles: docFiles,                     	allFiles: fileList                     });                 }                              }  	            }	    for(let i = 0, len = queue.length; i < len; i++) {	        console.log("扫描路径：" + queue[i])	        self.file.listDir(queue[i], ".")	        .then(entries => {	        	console.log("记录条数：" + entries.length);	            for(let j = 0, leng = entries.length; j < leng; j++) {	                let ent = entries[j];	                if(ent.isFile) {	                  console.log("文件：" + ent.name);	                  //文件，则检测类型，文件后缀符合筛选正则则添加到文件队列	                  if(reg.test(ent.name)) {	                      console.log("符合条件：" + ent.nativeURL);	                      fileList.push({	                         name: ent.name,	                         path: ent.nativeURL	                      });                      	                  }                        	                } else if(ent.isDirectory) {	                  console.log("文件夹:" + ent.nativeURL)	                  //文件夹，直接添加到队列	                  bfsQueue.push(ent.nativeURL);	                }	            } 	            levelFinishedCheck(len);	        }) 	        .catch(e => {	        	console.log("扫描出错：" + e.stack)	        	levelFinishedCheck(len)	        })	     }  	  }	}